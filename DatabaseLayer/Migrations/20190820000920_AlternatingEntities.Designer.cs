// <auto-generated />
using System;
using DatabaseLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DatabaseLayer.Migrations
{
    [DbContext(typeof(OrhedgeContext))]
    [Migration("20190820000920_AlternatingEntities")]
    partial class AlternatingEntities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DatabaseLayer.Entity.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("CategoryId");

                    b.HasIndex("CourseId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("DatabaseLayer.Entity.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Semester");

                    b.Property<int>("StudyYear");

                    b.HasKey("CourseId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("DatabaseLayer.Entity.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Description");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Index")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Photo");

                    b.Property<int>("Privilege");

                    b.Property<double>("Rating");

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("StudentId");

                    b.HasAlternateKey("Username");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("DatabaseLayer.Entity.StudyMaterial", b =>
                {
                    b.Property<int>("StudyMaterialId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("StudentId");

                    b.Property<DateTime>("UploadDate");

                    b.Property<string>("Uri")
                        .IsRequired();

                    b.HasKey("StudyMaterialId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudyMaterials");
                });

            modelBuilder.Entity("DatabaseLayer.Entity.StudyMaterialRating", b =>
                {
                    b.Property<int>("StudentId");

                    b.Property<int>("StudyMaterialId");

                    b.Property<int>("AuthorId");

                    b.Property<double>("Rating");

                    b.HasKey("StudentId", "StudyMaterialId");

                    b.HasIndex("StudyMaterialId");

                    b.ToTable("StudyMaterialRatings");
                });

            modelBuilder.Entity("DatabaseLayer.Entity.Category", b =>
                {
                    b.HasOne("DatabaseLayer.Entity.Course", "Course")
                        .WithMany("Categories")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DatabaseLayer.Entity.StudyMaterial", b =>
                {
                    b.HasOne("DatabaseLayer.Entity.Category", "Category")
                        .WithMany("StudyMaterials")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DatabaseLayer.Entity.Student", "Student")
                        .WithMany("StudyMaterials")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DatabaseLayer.Entity.StudyMaterialRating", b =>
                {
                    b.HasOne("DatabaseLayer.Entity.Student", "Student")
                        .WithMany("StudyMaterialRatingsStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DatabaseLayer.Entity.StudyMaterial", "StudyMaterial")
                        .WithMany("StudyMaterialRatings")
                        .HasForeignKey("StudyMaterialId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
